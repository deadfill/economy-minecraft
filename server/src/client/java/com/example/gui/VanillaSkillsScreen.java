package com.example.gui;

import com.example.skill.EconomyApiClient;
import com.example.skill.NatsSkillClient;
import com.example.skill.ServerSkill;
import com.example.skill.SkillTraining;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiGraphics;
import net.minecraft.client.gui.components.Button;
import net.minecraft.client.gui.screens.Screen;
import net.minecraft.client.resources.sounds.SimpleSoundInstance;
import net.minecraft.network.chat.Component;
import net.minecraft.sounds.SoundEvents;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.logging.Logger;

/**
 * –≠–∫—Ä–∞–Ω —Å–∏—Å—Ç–µ–º—ã —Å–∫–∏–ª–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ Minecraft Screen
 * –ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
 */
public class VanillaSkillsScreen extends Screen {
    private static final Logger LOGGER = Logger.getLogger(VanillaSkillsScreen.class.getName());
    
    private final EconomyApiClient apiClient;
    private final NatsSkillClient natsClient;
    private final List<ServerSkill> skills;
    private boolean dataLoaded = false;
    private String statusMessage = "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...";
    private int scrollOffset = 0;
    private final int maxVisibleSkills = 3;
    private long lastUpdateTime = 0;
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º NATS real-time —Å–æ–±—ã—Ç–∏—è

    public VanillaSkillsScreen() {
        super(Component.literal("–°–∏—Å—Ç–µ–º–∞ —Å–∫–∏–ª–ª–æ–≤"));
        this.apiClient = new EconomyApiClient();
        this.skills = new ArrayList<>();
        this.lastUpdateTime = System.currentTimeMillis();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º NATS –∫–ª–∏–µ–Ω—Ç –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        UUID playerUuid = apiClient.getCurrentPlayerUuid();
        if (playerUuid != null) {
            this.natsClient = new NatsSkillClient(playerUuid);
            setupNatsHandlers();
            natsClient.connect();
        } else {
            this.natsClient = null;
            LOGGER.warning("Player UUID is null, NATS client not initialized");
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ NATS —Å–æ–±—ã—Ç–∏–π
     */
    private void setupNatsHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å–∫–∏–ª–ª–∞
        natsClient.setOnSkillLevelUpdate(update -> {
            for (ServerSkill skill : skills) {
                if (skill.id.equals(update.skillId)) {
                    skill.currentLevel = update.newLevel;
                    statusMessage = String.format("‚ú® %s –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è %d!", 
                        skill.title, update.newLevel);
                    playLevelUpSound();
                    LOGGER.info("Skill level updated via NATS: " + skill.title + " -> " + update.newLevel);
                    break;
                }
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        natsClient.setOnTrainingStatusUpdate(update -> {
            for (ServerSkill skill : skills) {
                if (skill.id.equals(update.skillId)) {
                    if ("COMPLETED".equals(update.status)) {
                        skill.activeTraining = null;
                        skill.currentLevel = update.targetLevel;
                        statusMessage = String.format("üéâ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ %s –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Ä–æ–≤–µ–Ω—å: %d", 
                            skill.title, update.targetLevel);
                        playLevelUpSound();
                        LOGGER.info("Training completed via NATS: " + skill.title + " -> level " + update.targetLevel);
                    } else if ("STARTED".equals(update.status)) {
                        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                        skill.activeTraining = new SkillTraining(
                            update.skillId, update.targetLevel, 
                            update.startMs, update.endMs);
                        statusMessage = String.format("üöÄ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ %s –Ω–∞—á–∞—Ç–∞!", skill.title);
                        LOGGER.info("Training started via NATS: " + skill.title);
                    }
                    break;
                }
            }
        });
        
        natsClient.setOnConnected(() -> {
            statusMessage = "üì° –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ NATS —Å–µ—Ä–≤–µ—Ä—É - real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã";
            LOGGER.info("NATS client connected - real-time updates enabled");
        });
        
        natsClient.setOnDisconnected(() -> {
            statusMessage = "‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å NATS –ø–æ—Ç–µ—Ä—è–Ω–æ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã";
            LOGGER.warning("NATS client disconnected - updates paused");
        });
    }
    
    /**
     * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
     */
    private void playLevelUpSound() {
        Minecraft.getInstance().getSoundManager().play(
            SimpleSoundInstance.forUI(SoundEvents.PLAYER_LEVELUP, 1.0F)
        );
    }

    @Override
    protected void init() {
        super.init();
        
        // –ö–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å" 
        this.addRenderableWidget(Button.builder(
            Component.literal("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"),
            button -> {
                playClickSound();
                // –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å: forceLoadSkillsData() –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ
                // –∏–ª–∏ loadSkillsData() –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                loadSkillsData(); // –û–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –∫—ç—à–µ–º
                lastUpdateTime = System.currentTimeMillis();
            }
        ).bounds(this.width / 2 - 155, this.height - 40, 100, 20).build());

        // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö"
        this.addRenderableWidget(Button.builder(
            Component.literal("‚ñ≤ –í–≤–µ—Ä—Ö"),
            button -> {
                playClickSound();
                if (scrollOffset > 0) {
                    scrollOffset--;
                }
            }
        ).bounds(this.width / 2 - 50, this.height - 40, 45, 20).build());

        // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑"
        this.addRenderableWidget(Button.builder(
            Component.literal("‚ñº –í–Ω–∏–∑"),
            button -> {
                playClickSound();
                if (scrollOffset < Math.max(0, skills.size() - maxVisibleSkills)) {
                    scrollOffset++;
                }
            }
        ).bounds(this.width / 2 + 5, this.height - 40, 45, 20).build());

        // –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä—ã—Ç—å"
        this.addRenderableWidget(Button.builder(
            Component.literal("‚ùå –ó–∞–∫—Ä—ã—Ç—å"),
            button -> {
                playClickSound();
                onClose();
            }
        ).bounds(this.width / 2 + 55, this.height - 40, 100, 20).build());

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if (!dataLoaded) {
            loadSkillsData();
        }
    }

    @Override
    public void render(GuiGraphics graphics, int mouseX, int mouseY, float partialTicks) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º NATS real-time —Å–æ–±—ã—Ç–∏—è
        
        // –†–µ–Ω–¥–µ—Ä–∏–º —Ñ–æ–Ω
        this.renderBackground(graphics, mouseX, mouseY, partialTicks);
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        graphics.drawCenteredString(this.font, "üè≠ –°–∏—Å—Ç–µ–º–∞ —Å–∫–∏–ª–ª–æ–≤", this.width / 2, 20, 0xFFFFFF);
        graphics.drawCenteredString(this.font, "–†–∞–∑–≤–∏–≤–∞–π—Ç–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤", this.width / 2, 35, 0xAAAAAA);

        // –°—Ç–∞—Ç—É—Å
        graphics.drawCenteredString(this.font, statusMessage, this.width / 2, 55, 0xFFAA00);

        if (dataLoaded && !skills.isEmpty()) {
            renderSkills(graphics, mouseX, mouseY);
            renderScrollInfo(graphics);
        } else if (dataLoaded) {
            graphics.drawCenteredString(this.font, "‚ùå –°–∫–∏–ª–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", this.width / 2, 80, 0xFF0000);
        }

        // –†–µ–Ω–¥–µ—Ä–∏–º –∫–Ω–æ–ø–∫–∏ –∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        super.render(graphics, mouseX, mouseY, partialTicks);
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–∫–∏–ª–ª–æ–≤
     */
    private void renderSkills(GuiGraphics graphics, int mouseX, int mouseY) {
        int startY = 80;
        int skillHeight = 100;
        int skillWidth = 500;
        int x = (this.width - skillWidth) / 2;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å —Å–∫–∏–ª–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        int endIndex = Math.min(scrollOffset + maxVisibleSkills, skills.size());
        
        for (int i = scrollOffset; i < endIndex; i++) {
            ServerSkill skill = skills.get(i);
            int y = startY + (i - scrollOffset) * skillHeight;

            // –§–æ–Ω –ø–∞–Ω–µ–ª–∏ —Å–∫–∏–ª–ª–∞
            graphics.fill(x - 5, y - 5, x + skillWidth + 5, y + skillHeight - 5, 0x80000000);
            graphics.fill(x, y, x + skillWidth, y + skillHeight - 10, 0x40FFFFFF);

            // –†–∞–º–∫–∞
            graphics.fill(x - 1, y - 1, x + skillWidth + 1, y + 1, 0xFF666666);
            graphics.fill(x - 1, y + skillHeight - 11, x + skillWidth + 1, y + skillHeight - 9, 0xFF666666);
            graphics.fill(x - 1, y - 1, x + 1, y + skillHeight - 9, 0xFF666666);
            graphics.fill(x + skillWidth - 1, y - 1, x + skillWidth + 1, y + skillHeight - 9, 0xFF666666);

            // –ù–∞–∑–≤–∞–Ω–∏–µ –∏ —É—Ä–æ–≤–µ–Ω—å
            String titleText = skill.getIcon() + " " + skill.title;
            graphics.drawString(this.font, titleText, x + 10, y + 5, 0xFFFFFF);
            
            String levelText = "–£—Ä–æ–≤–µ–Ω—å " + skill.currentLevel + "/" + skill.maxLevel;
            graphics.drawString(this.font, levelText, x + skillWidth - 10 - this.font.width(levelText), y + 5, 0xFFFF00);

            // –û–ø–∏—Å–∞–Ω–∏–µ
            graphics.drawString(this.font, skill.description, x + 10, y + 20, 0xCCCCCC);

            // –ë–æ–Ω—É—Å
            String bonusText = skill.getBonusDescription();
            if (!bonusText.isEmpty()) {
                graphics.drawString(this.font, "üíé " + bonusText, x + 10, y + 35, 0x00FF00);
            }

            // –°—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            if (skill.isTraining()) {
                float progress = skill.getTrainingProgress();
                String progressText = String.format("‚è±Ô∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: %.1f%% (%s)", progress * 100, skill.getFormattedTimeLeft());
                
                // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                long time = System.currentTimeMillis();
                float pulse = (float) (0.7 + 0.3 * Math.sin(time * 0.003));
                int animatedColor = (int) (0xFF * pulse) << 16 | (int) (0xAA * pulse) << 8;
                
                graphics.drawString(this.font, progressText, x + 10, y + 50, 0xFF000000 | animatedColor);

                // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                int barWidth = 300;
                int barHeight = 8;
                int barX = x + 10;
                int barY = y + 65;
                
                // –§–æ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
                graphics.fill(barX, barY, barX + barWidth, barY + barHeight, 0xFF333333);
                
                // –†–∞–º–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
                graphics.fill(barX - 1, barY - 1, barX + barWidth + 1, barY - 1, 0xFF666666);
                graphics.fill(barX - 1, barY + barHeight, barX + barWidth + 1, barY + barHeight + 1, 0xFF666666);
                graphics.fill(barX - 1, barY - 1, barX - 1, barY + barHeight + 1, 0xFF666666);
                graphics.fill(barX + barWidth, barY - 1, barX + barWidth + 1, barY + barHeight + 1, 0xFF666666);
                
                // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
                int fillWidth = (int) (barWidth * progress);
                if (fillWidth > 0) {
                    // –ì—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç —Ç–µ–º–Ω–æ–≥–æ –∫ —Å–≤–µ—Ç–ª–æ–º—É
                    int color = skill.getColor();
                    int darkColor = darkenColor(color, 0.7f);
                    
                    for (int px = 0; px < fillWidth; px++) {
                        float ratio = (float) px / fillWidth;
                        int blendedColor = blendColors(darkColor, color, ratio);
                        graphics.fill(barX + px, barY, barX + px + 1, barY + barHeight, blendedColor);
                    }
                }
                
                // –ü—Ä–æ—Ü–µ–Ω—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
                String percentText = String.format("%.1f%%", progress * 100);
                int textWidth = this.font.width(percentText);
                graphics.drawString(this.font, percentText, barX + (barWidth - textWidth) / 2, barY + 1, 0xFFFFFF);
                
            } else if (skill.canTrain()) {
                String trainText = "üìà –ù–∞–∂–º–∏—Ç–µ T –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (" + skill.getFormattedDuration() + ")";
                graphics.drawString(this.font, trainText, x + 10, y + 50, 0xFFFF00);
                
                // –ü–æ–¥—Å–∫–∞–∑–∫–∞
                graphics.drawString(this.font, "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å'", x + 10, y + 65, 0xAAAAAA);
                
            } else if (skill.currentLevel >= skill.maxLevel) {
                graphics.drawString(this.font, "‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç", x + 10, y + 50, 0x00FF00);
            }

            // –ö–Ω–æ–ø–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–µ—Å–ª–∏ –º–æ–∂–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å)
            if (skill.canTrain()) {
                int buttonX = x + skillWidth - 120;
                int buttonY = y + 60;
                int buttonWidth = 100;
                int buttonHeight = 20;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–≤–µ–¥–µ–Ω–∞ –ª–∏ –º—ã—à—å –Ω–∞ –∫–Ω–æ–ø–∫—É
                boolean isHovered = mouseX >= buttonX && mouseX <= buttonX + buttonWidth && 
                                  mouseY >= buttonY && mouseY <= buttonY + buttonHeight;
                
                // –§–æ–Ω –∫–Ω–æ–ø–∫–∏
                int buttonColor = isHovered ? 0x80FFFF00 : 0x80666666;
                graphics.fill(buttonX, buttonY, buttonX + buttonWidth, buttonY + buttonHeight, buttonColor);
                
                // –†–∞–º–∫–∞ –∫–Ω–æ–ø–∫–∏
                int borderColor = isHovered ? 0xFFFFFF00 : 0xFF999999;
                graphics.fill(buttonX - 1, buttonY - 1, buttonX + buttonWidth + 1, buttonY, borderColor);
                graphics.fill(buttonX - 1, buttonY + buttonHeight, buttonX + buttonWidth + 1, buttonY + buttonHeight + 1, borderColor);
                graphics.fill(buttonX - 1, buttonY - 1, buttonX, buttonY + buttonHeight + 1, borderColor);
                graphics.fill(buttonX + buttonWidth, buttonY - 1, buttonX + buttonWidth + 1, buttonY + buttonHeight + 1, borderColor);
                
                // –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                String buttonText = "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å";
                int textWidth = this.font.width(buttonText);
                graphics.drawString(this.font, buttonText, buttonX + (buttonWidth - textWidth) / 2, buttonY + 6, 0xFFFFFF);
            }
        }
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
     */
    private void renderScrollInfo(GuiGraphics graphics) {
        if (skills.size() > maxVisibleSkills) {
            String scrollInfo = String.format("–ü–æ–∫–∞–∑–∞–Ω–æ %d-%d –∏–∑ %d —Å–∫–∏–ª–ª–æ–≤", 
                scrollOffset + 1, 
                Math.min(scrollOffset + maxVisibleSkills, skills.size()), 
                skills.size());
            graphics.drawCenteredString(this.font, scrollInfo, this.width / 2, this.height - 60, 0xAAAAAA);
        }
    }

    @Override
    public boolean mouseClicked(double mouseX, double mouseY, int button) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        if (dataLoaded && !skills.isEmpty()) {
            int startY = 80;
            int skillHeight = 100;
            int skillWidth = 500;
            int x = (this.width - skillWidth) / 2;
            
            int endIndex = Math.min(scrollOffset + maxVisibleSkills, skills.size());
            
            for (int i = scrollOffset; i < endIndex; i++) {
                ServerSkill skill = skills.get(i);
                if (!skill.canTrain()) continue;
                
                int y = startY + (i - scrollOffset) * skillHeight;
                int buttonX = x + skillWidth - 120;
                int buttonY = y + 60;
                int buttonWidth = 100;
                int buttonHeight = 20;
                
                if (mouseX >= buttonX && mouseX <= buttonX + buttonWidth && 
                    mouseY >= buttonY && mouseY <= buttonY + buttonHeight) {
                    playClickSound();
                    startTraining(skill);
                    return true;
                }
            }
        }
        
        return super.mouseClicked(mouseX, mouseY, button);
    }

    @Override
    public boolean keyPressed(int keyCode, int scanCode, int modifiers) {
        // –ö–ª–∞–≤–∏—à–∞ T –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–∫–∏–ª–ª–∞
        if (keyCode == 84) { // T key
            for (ServerSkill skill : skills) {
                if (skill.canTrain()) {
                    startTraining(skill);
                    break;
                }
            }
            return true;
        }
        
        // –°—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        if (keyCode == 265) { // UP arrow
            if (scrollOffset > 0) {
                scrollOffset--;
                playClickSound();
            }
            return true;
        }
        
        if (keyCode == 264) { // DOWN arrow
            if (scrollOffset < Math.max(0, skills.size() - maxVisibleSkills)) {
                scrollOffset++;
                playClickSound();
            }
            return true;
        }
        
        return super.keyPressed(keyCode, scanCode, modifiers);
    }

    /**
     * –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–±–µ–∑ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏)
     */
    private void refreshSkillsData() {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        long currentTime = System.currentTimeMillis();
        if (currentTime - lastUpdateTime < 3000) { // –ú–∏–Ω–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
            return;
        }
        lastUpdateTime = currentTime;
        
        UUID playerUuid = apiClient.getCurrentPlayerUuid();
        if (playerUuid == null) return;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        apiClient.getTrainingStatus(playerUuid).thenAccept(training -> {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            for (ServerSkill skill : skills) {
                skill.activeTraining = null;
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
            if (training != null) {
                for (ServerSkill skill : skills) {
                    if (skill.id.equals(training.skillId)) {
                        skill.activeTraining = training;
                        break;
                    }
                }
            }
        }).exceptionally(throwable -> {
            // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            return null;
        });
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–∫–∏–ª–ª–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É—è –∫—ç—à)
     */
    private void forceLoadSkillsData() {
        statusMessage = "üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...";
        dataLoaded = false;
        scrollOffset = 0;

        UUID playerUuid = apiClient.getCurrentPlayerUuid();
        if (playerUuid == null) {
            statusMessage = "‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω";
            return;
        }

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–∏–ª–ª–æ–≤ (–∏–≥–Ω–æ—Ä–∏—Ä—É—è –∫—ç—à)
        apiClient.getSkills(true).thenCompose(serverSkills -> {
            skills.clear();
            skills.addAll(serverSkills);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–≤–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–∏–ª–ª–∞
            List<java.util.concurrent.CompletableFuture<Void>> levelFutures = new ArrayList<>();
            for (ServerSkill skill : skills) {
                var levelFuture = apiClient.getSkillLevel(playerUuid, skill.id)
                    .thenAccept(level -> skill.currentLevel = level);
                levelFutures.add(levelFuture);
            }

            return java.util.concurrent.CompletableFuture.allOf(levelFutures.toArray(new java.util.concurrent.CompletableFuture[0]));

        }).thenCompose(v -> {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            return apiClient.getTrainingStatus(playerUuid);

        }).thenAccept(training -> {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
            if (training != null) {
                for (ServerSkill skill : skills) {
                    if (skill.id.equals(training.skillId)) {
                        skill.activeTraining = training;
                        break;
                    }
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            Minecraft.getInstance().execute(() -> {
                dataLoaded = true;
                if (skills.isEmpty()) {
                    statusMessage = "‚ùå –°–∫–∏–ª–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ";
                } else {
                    statusMessage = "‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ " + skills.size() + " —Å–∫–∏–ª–ª–æ–≤";
                }
            });

        }).exceptionally(throwable -> {
            Minecraft.getInstance().execute(() -> {
                statusMessage = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: " + throwable.getMessage();
                dataLoaded = false;
            });
            return null;
        });
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–∫–∏–ª–ª–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    private void loadSkillsData() {
        statusMessage = "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...";
        dataLoaded = false;
        scrollOffset = 0;

        UUID playerUuid = apiClient.getCurrentPlayerUuid();
        if (playerUuid == null) {
            statusMessage = "‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω";
            return;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–∏–ª–ª–æ–≤
        apiClient.getSkills().thenCompose(serverSkills -> {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ
            if (!serverSkills.isEmpty() || skills.isEmpty()) {
                skills.clear();
                skills.addAll(serverSkills);
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–≤–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–∏–ª–ª–∞
            List<java.util.concurrent.CompletableFuture<Void>> levelFutures = new ArrayList<>();
            for (ServerSkill skill : skills) {
                var levelFuture = apiClient.getSkillLevel(playerUuid, skill.id)
                    .thenAccept(level -> skill.currentLevel = level);
                levelFutures.add(levelFuture);
            }

            return java.util.concurrent.CompletableFuture.allOf(levelFutures.toArray(new java.util.concurrent.CompletableFuture[0]));

        }).thenCompose(v -> {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            return apiClient.getTrainingStatus(playerUuid);

        }).thenAccept(training -> {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
            if (training != null) {
                for (ServerSkill skill : skills) {
                    if (skill.id.equals(training.skillId)) {
                        skill.activeTraining = training;
                        break;
                    }
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            Minecraft.getInstance().execute(() -> {
                dataLoaded = true;
                if (skills.isEmpty()) {
                    statusMessage = "‚ùå –°–∫–∏–ª–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ";
                } else {
                    statusMessage = "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ " + skills.size() + " —Å–∫–∏–ª–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ T –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏";
                }
            });

        }).exceptionally(throwable -> {
            Minecraft.getInstance().execute(() -> {
                statusMessage = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: " + throwable.getMessage();
                dataLoaded = false;
            });
            return null;
        });
    }

    /**
     * –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å–∫–∏–ª–ª–∞
     */
    private void startTraining(ServerSkill skill) {
        UUID playerUuid = apiClient.getCurrentPlayerUuid();
        if (playerUuid == null) return;

        playClickSound();
        statusMessage = "üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É " + skill.title + "...";

        apiClient.startTraining(playerUuid, skill.id).thenAccept(success -> {
            Minecraft.getInstance().execute(() -> {
                if (success) {
                    statusMessage = "‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ " + skill.title + " –Ω–∞—á–∞—Ç–∞! –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...";
                    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ NATS —Å–æ–±—ã—Ç–∏–µ
                    LOGGER.info("Training request sent, waiting for NATS confirmation");
                } else {
                    statusMessage = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É " + skill.title;
                }
            });
        });
    }

    /**
     * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ –∫–ª–∏–∫–∞
     */
    private void playClickSound() {
        Minecraft.getInstance().getSoundManager().play(
            SimpleSoundInstance.forUI(SoundEvents.UI_BUTTON_CLICK, 1.0F)
        );
    }

    /**
     * –ó–∞—Ç–µ–º–Ω–∏—Ç—å —Ü–≤–µ—Ç
     */
    private int darkenColor(int color, float factor) {
        int a = (color >> 24) & 0xFF;
        int r = (int) (((color >> 16) & 0xFF) * factor);
        int g = (int) (((color >> 8) & 0xFF) * factor);
        int b = (int) ((color & 0xFF) * factor);
        return (a << 24) | (r << 16) | (g << 8) | b;
    }

    /**
     * –°–º–µ—à–∞—Ç—å –¥–≤–∞ —Ü–≤–µ—Ç–∞
     */
    private int blendColors(int color1, int color2, float ratio) {
        int a1 = (color1 >> 24) & 0xFF;
        int r1 = (color1 >> 16) & 0xFF;
        int g1 = (color1 >> 8) & 0xFF;
        int b1 = color1 & 0xFF;
        
        int a2 = (color2 >> 24) & 0xFF;
        int r2 = (color2 >> 16) & 0xFF;
        int g2 = (color2 >> 8) & 0xFF;
        int b2 = color2 & 0xFF;
        
        int a = (int) (a1 + (a2 - a1) * ratio);
        int r = (int) (r1 + (r2 - r1) * ratio);
        int g = (int) (g1 + (g2 - g1) * ratio);
        int b = (int) (b1 + (b2 - b1) * ratio);
        
        return (a << 24) | (r << 16) | (g << 8) | b;
    }

    @Override
    public void onClose() {
        // –û—Ç–∫–ª—é—á–∞–µ–º NATS –∫–ª–∏–µ–Ω—Ç
        if (natsClient != null) {
            natsClient.disconnect();
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
        apiClient.close();
        super.onClose();
        
        LOGGER.info("VanillaSkillsScreen closed, connections terminated");
    }

    @Override
    public boolean isPauseScreen() {
        return false; // –ù–µ —Å—Ç–∞–≤–∏–º –∏–≥—Ä—É –Ω–∞ –ø–∞—É–∑—É
    }
}
