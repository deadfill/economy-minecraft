package com.example.gui.owo;

import com.example.skill.EconomyApiClient;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiGraphics;
import net.minecraft.client.gui.components.Button;
import net.minecraft.client.gui.screens.Screen;
import net.minecraft.client.resources.sounds.SimpleSoundInstance;
import net.minecraft.network.chat.Component;
import net.minecraft.sounds.SoundEvents;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.logging.Logger;

/**
 * –≠–∫—Ä–∞–Ω —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –≤ —Å—Ç–∏–ª–µ EVE Online
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
 */
public class EveStyleProductionScreen extends Screen {
    private static final Logger LOGGER = Logger.getLogger(EveStyleProductionScreen.class.getName());
    
    // –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ EVE Online
    private static final int EVE_BLUE = 0xFF00A0E0;
    private static final int EVE_DARK_BLUE = 0xFF002B49;
    private static final int EVE_VERY_DARK_BLUE = 0xFF001429;
    private static final int EVE_ORANGE = 0xFFFF6600;
    private static final int EVE_GREEN = 0xFF00CC00;
    private static final int EVE_RED = 0xFFFF3300;
    private static final int EVE_GRAY = 0xFFAAAAAA;
    
    private final EconomyApiClient apiClient;
    private final List<ProductionLine> productionLines;
    private boolean dataLoaded = false;
    private String statusMessage = "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...";
    private int scrollOffset = 0;
    private final int maxVisibleLines = 3;
    private long lastUpdateTime = 0;
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞—Ü–∏–∏
    private long animationStartTime = System.currentTimeMillis();

    // –ú–æ–¥–µ–ª—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏
    public static class ProductionLine {
        public String id;
        public String name;
        public String status; // "ACTIVE", "INACTIVE", "PROCESSING"
        public String recipeName;
        public int progress; // 0-100
        public List<String> inputResources;
        public List<String> outputResources;
        public long timeLeftMs;
        
        public ProductionLine(String id, String name, String status, String recipeName, 
                             int progress, List<String> inputResources, List<String> outputResources, 
                             long timeLeftMs) {
            this.id = id;
            this.name = name;
            this.status = status;
            this.recipeName = recipeName;
            this.progress = progress;
            this.inputResources = inputResources;
            this.outputResources = outputResources;
            this.timeLeftMs = timeLeftMs;
        }
        
        public String getIcon() {
            return "‚öôÔ∏è";
        }
        
        public int getColor() {
            return switch (status) {
                case "ACTIVE" -> EVE_GREEN;
                case "PROCESSING" -> EVE_ORANGE;
                case "INACTIVE" -> EVE_GRAY;
                default -> EVE_RED;
            };
        }
        
        public String getStatusDescription() {
            return switch (status) {
                case "ACTIVE" -> "–ê–∫—Ç–∏–≤–Ω–∞";
                case "PROCESSING" -> "–í –ø—Ä–æ—Ü–µ—Å—Å–µ";
                case "INACTIVE" -> "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞";
                default -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
            };
        }
        
        public String getFormattedTimeLeft() {
            if (timeLeftMs <= 0) return "–ì–æ—Ç–æ–≤–æ!";
            
            long seconds = timeLeftMs / 1000;
            long minutes = seconds / 60;
            long hours = minutes / 60;
            long days = hours / 24;

            if (days > 0) {
                return String.format("%d–¥ %d—á", days, hours % 24);
            } else if (hours > 0) {
                return String.format("%d—á %d–º", hours, minutes % 60);
            } else if (minutes > 0) {
                return String.format("%d–º %d—Å", minutes, seconds % 60);
            } else {
                return String.format("%d—Å", seconds);
            }
        }
    }

    public EveStyleProductionScreen() {
        super(Component.literal("–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏ EVE Online"));
        this.apiClient = new EconomyApiClient();
        this.productionLines = new ArrayList<>();
        this.lastUpdateTime = System.currentTimeMillis();
        this.animationStartTime = System.currentTimeMillis();
    }

    @Override
    protected void init() {
        super.init();
        
        // –ö–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å" 
        this.addRenderableWidget(Button.builder(
            Component.literal("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"),
            button -> {
                playClickSound();
                loadProductionData();
                lastUpdateTime = System.currentTimeMillis();
            }
        ).bounds(this.width / 2 - 155, this.height - 40, 100, 20).build());

        // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö"
        this.addRenderableWidget(Button.builder(
            Component.literal("‚ñ≤ –í–≤–µ—Ä—Ö"),
            button -> {
                playClickSound();
                if (scrollOffset > 0) {
                    scrollOffset--;
                }
            }
        ).bounds(this.width / 2 - 50, this.height - 40, 45, 20).build());

        // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑"
        this.addRenderableWidget(Button.builder(
            Component.literal("‚ñº –í–Ω–∏–∑"),
            button -> {
                playClickSound();
                if (scrollOffset < Math.max(0, productionLines.size() - maxVisibleLines)) {
                    scrollOffset++;
                }
            }
        ).bounds(this.width / 2 + 5, this.height - 40, 45, 20).build());

        // –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä—ã—Ç—å"
        this.addRenderableWidget(Button.builder(
            Component.literal("‚ùå –ó–∞–∫—Ä—ã—Ç—å"),
            button -> {
                playClickSound();
                onClose();
            }
        ).bounds(this.width / 2 + 55, this.height - 40, 100, 20).build());

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if (!dataLoaded) {
            loadProductionData();
        }
    }

    @Override
    public void render(GuiGraphics graphics, int mouseX, int mouseY, float partialTicks) {
        // –†–µ–Ω–¥–µ—Ä–∏–º —Ñ–æ–Ω –≤ —Å—Ç–∏–ª–µ EVE Online
        renderEveBackground(graphics);
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Å—Ç–∏–ª–µ EVE Online
        renderEveHeader(graphics);
        
        // –°—Ç–∞—Ç—É—Å
        graphics.drawCenteredString(this.font, statusMessage, this.width / 2, 55, EVE_ORANGE);

        if (dataLoaded && !productionLines.isEmpty()) {
            renderProductionLines(graphics, mouseX, mouseY);
            renderScrollInfo(graphics);
        } else if (dataLoaded) {
            graphics.drawCenteredString(this.font, "‚ùå –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", this.width / 2, 80, EVE_RED);
        }

        // –†–µ–Ω–¥–µ—Ä–∏–º –∫–Ω–æ–ø–∫–∏ –∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        super.render(graphics, mouseX, mouseY, partialTicks);
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ñ–æ–Ω–∞ –≤ —Å—Ç–∏–ª–µ EVE Online
     */
    private void renderEveBackground(GuiGraphics graphics) {
        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        int gradientHeight = this.height;
        for (int y = 0; y < gradientHeight; y++) {
            float ratio = (float) y / gradientHeight;
            int color = blendColors(EVE_VERY_DARK_BLUE, EVE_DARK_BLUE, ratio * 0.7f);
            graphics.fill(0, y, this.width, y + 1, color);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        long time = System.currentTimeMillis() - animationStartTime;
        float pulse = (float) (0.3 + 0.2 * Math.sin(time * 0.002));
        
        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        for (int i = 0; i < 5; i++) {
            int y = 100 + i * 30;
            int alpha = (int) (0x33 * (1.0 - pulse * 0.5));
            graphics.fill(0, y, this.width, y + 1, (alpha << 24) | (EVE_BLUE & 0xFFFFFF));
        }
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ —Å—Ç–∏–ª–µ EVE Online
     */
    private void renderEveHeader(GuiGraphics graphics) {
        // –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        graphics.drawCenteredString(this.font, "‚öôÔ∏è –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏", this.width / 2, 20, EVE_BLUE);
        
        // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        graphics.drawCenteredString(this.font, "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º —Ä–µ—Å—É—Ä—Å–æ–≤", this.width / 2, 35, EVE_GRAY);
        
        // –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ª–∏–Ω–∏—è
        graphics.fill(this.width / 2 - 200, 45, this.width / 2 + 200, 46, EVE_BLUE);
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏–Ω–∏–π –≤ —Å—Ç–∏–ª–µ EVE Online
     */
    private void renderProductionLines(GuiGraphics graphics, int mouseX, int mouseY) {
        int startY = 80;
        int lineHeight = 140;
        int lineWidth = 600;
        int x = (this.width - lineWidth) / 2;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –ª–∏–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        int endIndex = Math.min(scrollOffset + maxVisibleLines, productionLines.size());
        
        for (int i = scrollOffset; i < endIndex; i++) {
            ProductionLine line = productionLines.get(i);
            int y = startY + (i - scrollOffset) * lineHeight;

            // –§–æ–Ω –ø–∞–Ω–µ–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º EVE Online
            renderEveProductionPanel(graphics, x, y, lineWidth, lineHeight, line, mouseX, mouseY);
        }
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–∞–Ω–µ–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏ –≤ —Å—Ç–∏–ª–µ EVE Online
     */
    private void renderEveProductionPanel(GuiGraphics graphics, int x, int y, int width, int height, ProductionLine line, int mouseX, int mouseY) {
        // –§–æ–Ω –ø–∞–Ω–µ–ª–∏ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        for (int i = 0; i < height - 10; i++) {
            float ratio = (float) i / (height - 10);
            int color = blendColors(0x80001429, 0x40002B49, ratio);
            graphics.fill(x, y + i, x + width, y + i + 1, color);
        }
        
        // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è —Ä–∞–º–∫–∞
        graphics.fill(x - 2, y - 2, x + width + 2, y, line.getColor());
        graphics.fill(x - 2, y + height - 12, x + width + 2, y + height - 10, line.getColor());
        graphics.fill(x - 2, y - 2, x, y + height - 10, line.getColor());
        graphics.fill(x + width, y - 2, x + width + 2, y + height - 10, line.getColor());
        
        // –ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Ç–∞—Ç—É—Å
        String titleText = line.getIcon() + " " + line.name;
        graphics.drawString(this.font, titleText, x + 15, y + 10, EVE_BLUE);
        
        String statusText = "–°—Ç–∞—Ç—É—Å: " + line.getStatusDescription();
        graphics.drawString(this.font, statusText, x + width - 15 - this.font.width(statusText), y + 10, line.getColor());

        // –†–µ—Ü–µ–ø—Ç
        if (line.recipeName != null && !line.recipeName.isEmpty()) {
            graphics.drawString(this.font, "–†–µ—Ü–µ–ø—Ç: " + line.recipeName, x + 15, y + 30, EVE_GRAY);
        }

        // –ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
        if (line.status.equals("PROCESSING")) {
            String progressText = String.format("–ü—Ä–æ–≥—Ä–µ—Å—Å: %d%% (%s)", line.progress, line.getFormattedTimeLeft());
            
            // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
            long time = System.currentTimeMillis() - animationStartTime;
            float pulse = (float) (0.7 + 0.3 * Math.sin(time * 0.005));
            int animatedColor = blendColors(EVE_BLUE, 0xFFFFFFFF, pulse);
            
            graphics.drawString(this.font, progressText, x + 15, y + 50, animatedColor);

            // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤ —Å—Ç–∏–ª–µ EVE Online
            renderEveProgressBar(graphics, x + 15, y + 70, 450, 12, (float) line.progress / 100, line.getColor());
        } else {
            graphics.drawString(this.font, "–°—Ç–∞—Ç—É—Å: " + line.getStatusDescription(), x + 15, y + 50, line.getColor());
        }

        // –í—Ö–æ–¥—è—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã
        if (line.inputResources != null && !line.inputResources.isEmpty()) {
            graphics.drawString(this.font, "–í—Ö–æ–¥—è—â–∏–µ:", x + 15, y + 90, EVE_GRAY);
            for (int i = 0; i < Math.min(3, line.inputResources.size()); i++) {
                graphics.drawString(this.font, "  ‚Ä¢ " + line.inputResources.get(i), x + 15, y + 105 + i * 12, EVE_GREEN);
            }
            if (line.inputResources.size() > 3) {
                graphics.drawString(this.font, "  ‚Ä¢ –∏ –µ—â–µ " + (line.inputResources.size() - 3) + " —Ä–µ—Å—É—Ä—Å–æ–≤", x + 15, y + 141, EVE_GRAY);
            }
        }

        // –ò—Å—Ö–æ–¥—è—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã
        if (line.outputResources != null && !line.outputResources.isEmpty()) {
            graphics.drawString(this.font, "–ò—Å—Ö–æ–¥—è—â–∏–µ:", x + 300, y + 90, EVE_GRAY);
            for (int i = 0; i < Math.min(3, line.outputResources.size()); i++) {
                graphics.drawString(this.font, "  ‚Ä¢ " + line.outputResources.get(i), x + 300, y + 105 + i * 12, EVE_ORANGE);
            }
            if (line.outputResources.size() > 3) {
                graphics.drawString(this.font, "  ‚Ä¢ –∏ –µ—â–µ " + (line.outputResources.size() - 3) + " —Ä–µ—Å—É—Ä—Å–æ–≤", x + 300, y + 141, EVE_GRAY);
            }
        }

        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        int buttonX = x + width - 130;
        int buttonY = y + 100;
        int buttonWidth = 110;
        int buttonHeight = 25;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–≤–µ–¥–µ–Ω–∞ –ª–∏ –º—ã—à—å –Ω–∞ –∫–Ω–æ–ø–∫—É
        boolean isHovered = mouseX >= buttonX && mouseX <= buttonX + buttonWidth && 
                          mouseY >= buttonY && mouseY <= buttonY + buttonHeight;
        
        // –§–æ–Ω –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–∏–ª–µ EVE Online
        int buttonColor = isHovered ? 0xA0FF6600 : 0x80002B49;
        graphics.fill(buttonX, buttonY, buttonX + buttonWidth, buttonY + buttonHeight, buttonColor);
        
        // –†–∞–º–∫–∞ –∫–Ω–æ–ø–∫–∏
        int borderColor = isHovered ? EVE_ORANGE : EVE_BLUE;
        graphics.fill(buttonX - 1, buttonY - 1, buttonX + buttonWidth + 1, buttonY, borderColor);
        graphics.fill(buttonX - 1, buttonY + buttonHeight, buttonX + buttonWidth + 1, buttonY + buttonHeight + 1, borderColor);
        graphics.fill(buttonX - 1, buttonY - 1, buttonX, buttonY + buttonHeight + 1, borderColor);
        graphics.fill(buttonX + buttonWidth, buttonY - 1, buttonX + buttonWidth + 1, buttonY + buttonHeight + 1, borderColor);
        
        // –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        String buttonText = line.status.equals("ACTIVE") || line.status.equals("PROCESSING") ? "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" : "–ó–∞–ø—É—Å—Ç–∏—Ç—å";
        int textWidth = this.font.width(buttonText);
        graphics.drawString(this.font, buttonText, buttonX + (buttonWidth - textWidth) / 2, buttonY + 8, 0xFFFFFFFF);
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –≤ —Å—Ç–∏–ª–µ EVE Online
     */
    private void renderEveProgressBar(GuiGraphics graphics, int x, int y, int width, int height, float progress, int baseColor) {
        // –§–æ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        graphics.fill(x, y, x + width, y + height, 0xFF3333);
        
        // –†–∞–º–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        graphics.fill(x - 1, y - 1, x + width + 1, y, EVE_BLUE);
        graphics.fill(x - 1, y + height, x + width + 1, y + height + 1, EVE_BLUE);
        graphics.fill(x - 1, y - 1, x, y + height + 1, EVE_BLUE);
        graphics.fill(x + width, y - 1, x + width + 1, y + height + 1, EVE_BLUE);
        
        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        int fillWidth = (int) (width * progress);
        if (fillWidth > 0) {
            int darkColor = darkenColor(baseColor, 0.5f);
            
            for (int px = 0; px < fillWidth; px++) {
                float ratio = (float) px / fillWidth;
                int blendedColor = blendColors(darkColor, baseColor, ratio);
                graphics.fill(x + px, y, x + px + 1, y + height, blendedColor);
            }
        }
        
        // –ü—Ä–æ—Ü–µ–Ω—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        String percentText = String.format("%.0f%%", progress * 100);
        int textWidth = this.font.width(percentText);
        graphics.drawString(this.font, percentText, x + (width - textWidth) / 2, y + 2, 0xFFFFFFFF);
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
     */
    private void renderScrollInfo(GuiGraphics graphics) {
        if (productionLines.size() > maxVisibleLines) {
            String scrollInfo = String.format("–ü–æ–∫–∞–∑–∞–Ω–æ %d-%d –∏–∑ %d –ª–∏–Ω–∏–π", 
                scrollOffset + 1, 
                Math.min(scrollOffset + maxVisibleLines, productionLines.size()), 
                productionLines.size());
            graphics.drawCenteredString(this.font, scrollInfo, this.width / 2, this.height - 60, EVE_GRAY);
        }
    }

    @Override
    public boolean mouseClicked(double mouseX, double mouseY, int button) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if (dataLoaded && !productionLines.isEmpty()) {
            int startY = 80;
            int lineHeight = 140;
            int lineWidth = 600;
            int x = (this.width - lineWidth) / 2;
            
            int endIndex = Math.min(scrollOffset + maxVisibleLines, productionLines.size());
            
            for (int i = scrollOffset; i < endIndex; i++) {
                ProductionLine line = productionLines.get(i);
                
                int y = startY + (i - scrollOffset) * lineHeight;
                int buttonX = x + lineWidth - 130;
                int buttonY = y + 100;
                int buttonWidth = 110;
                int buttonHeight = 25;
                
                if (mouseX >= buttonX && mouseX <= buttonX + buttonWidth && 
                    mouseY >= buttonY && mouseY <= buttonY + buttonHeight) {
                    playClickSound();
                    toggleProductionLine(line);
                    return true;
                }
            }
        }
        
        return super.mouseClicked(mouseX, mouseY, button);
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    private void loadProductionData() {
        statusMessage = "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...";
        dataLoaded = false;
        scrollOffset = 0;

        UUID playerUuid = apiClient.getCurrentPlayerUuid();
        if (playerUuid == null) {
            statusMessage = "‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω";
            return;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏–Ω–∏–π
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API
        // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        loadTestProductionData();
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
     */
    private void loadTestProductionData() {
        productionLines.clear();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏
        List<String> input1 = new ArrayList<>();
        input1.add("–ñ–µ–ª–µ–∑–Ω–∞—è —Ä—É–¥–∞ x10");
        input1.add("–£–≥–æ–ª—å x5");
        
        List<String> output1 = new ArrayList<>();
        output1.add("–ñ–µ–ª–µ–∑–Ω—ã–µ —Å–ª–∏—Ç–∫–∏ x5");
        
        productionLines.add(new ProductionLine(
            "line1", 
            "–î–æ–º–µ–Ω–Ω–∞—è –ø–µ—á—å", 
            "PROCESSING", 
            "–í—ã–ø–ª–∞–≤–∫–∞ –∂–µ–ª–µ–∑–∞", 
            65, 
            input1, 
            output1, 
            3600000 // 1 —á–∞—Å
        ));
        
        List<String> input2 = new ArrayList<>();
        input2.add("–î–µ—Ä–µ–≤–æ x20");
        input2.add("–ñ–µ–ª–µ–∑–Ω—ã–µ —Å–ª–∏—Ç–∫–∏ x2");
        
        List<String> output2 = new ArrayList<>();
        output2.add("–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π —Å—Ç–æ–ª x1");
        output2.add("–î–æ—Å–∫–∏ x10");
        
        productionLines.add(new ProductionLine(
            "line2", 
            "–°—Ç–æ–ª—è—Ä–Ω–∞—è –º–∞—Å—Ç–µ—Ä—Å–∫–∞—è", 
            "ACTIVE", 
            "–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –º–µ–±–µ–ª–∏", 
            0, 
            input2, 
            output2, 
            0
        ));
        
        List<String> input3 = new ArrayList<>();
        input3.add("–ö–∞–º–µ–Ω—å x15");
        input3.add("–ñ–µ–ª–µ–∑–Ω—ã–µ —Å–ª–∏—Ç–∫–∏ x3");
        
        List<String> output3 = new ArrayList<>();
        output3.add("–ö–∞–º–µ–Ω–Ω–∞—è –ø–µ—á—å x1");
        output3.add("–ë—É–ª—ã–∂–Ω–∏–∫ x10");
        
        productionLines.add(new ProductionLine(
            "line3", 
            "–ö–∞–º–µ–Ω–æ—Ç–µ—Å–Ω–∞—è –º–∞—Å—Ç–µ—Ä—Å–∫–∞—è", 
            "INACTIVE", 
            "", 
            0, 
            input3, 
            output3, 
            0
        ));
        
        dataLoaded = true;
        statusMessage = "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ " + productionLines.size() + " –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏–Ω–∏–π";
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏
     */
    private void toggleProductionLine(ProductionLine line) {
        playClickSound();
        statusMessage = "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º " + line.name + "...";
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        if (line.status.equals("ACTIVE") || line.status.equals("PROCESSING")) {
            line.status = "INACTIVE";
            statusMessage = "‚úÖ " + line.name + " –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞";
        } else {
            line.status = "ACTIVE";
            statusMessage = "‚úÖ " + line.name + " –∑–∞–ø—É—â–µ–Ω–∞";
        }
    }

    /**
     * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ –∫–ª–∏–∫–∞
     */
    private void playClickSound() {
        Minecraft.getInstance().getSoundManager().play(
            SimpleSoundInstance.forUI(SoundEvents.UI_BUTTON_CLICK, 1.0F)
        );
    }

    /**
     * –ó–∞—Ç–µ–º–Ω–∏—Ç—å —Ü–≤–µ—Ç
     */
    private int darkenColor(int color, float factor) {
        int a = (color >> 24) & 0xFF;
        int r = (int) (((color >> 16) & 0xFF) * factor);
        int g = (int) (((color >> 8) & 0xFF) * factor);
        int b = (int) ((color & 0xFF) * factor);
        return (a << 24) | (r << 16) | (g << 8) | b;
    }

    /**
     * –°–º–µ—à–∞—Ç—å –¥–≤–∞ —Ü–≤–µ—Ç–∞
     */
    private int blendColors(int color1, int color2, float ratio) {
        int a1 = (color1 >> 24) & 0xFF;
        int r1 = (color1 >> 16) & 0xFF;
        int g1 = (color1 >> 8) & 0xFF;
        int b1 = color1 & 0xFF;
        
        int a2 = (color2 >> 24) & 0xFF;
        int r2 = (color2 >> 16) & 0xFF;
        int g2 = (color2 >> 8) & 0xFF;
        int b2 = color2 & 0xFF;
        
        int a = (int) (a1 + (a2 - a1) * ratio);
        int r = (int) (r1 + (r2 - r1) * ratio);
        int g = (int) (g1 + (g2 - g1) * ratio);
        int b = (int) (b1 + (b2 - b1) * ratio);
        
        return (a << 24) | (r << 16) | (g << 8) | b;
    }

    @Override
    public void onClose() {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
        apiClient.close();
        super.onClose();
        
        LOGGER.info("EveStyleProductionScreen closed");
    }

    @Override
    public boolean isPauseScreen() {
        return false; // –ù–µ —Å—Ç–∞–≤–∏–º –∏–≥—Ä—É –Ω–∞ –ø–∞—É–∑—É
    }
}