package com.example.rtsecon;

import com.example.rtsecon.http.EconHttp;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import com.mojang.brigadier.arguments.IntegerArgumentType;
import com.mojang.brigadier.arguments.StringArgumentType;

import net.fabricmc.api.ModInitializer;
import net.fabricmc.fabric.api.command.v2.CommandRegistrationCallback;
import net.fabricmc.fabric.api.event.lifecycle.v1.ServerTickEvents;
import net.fabricmc.fabric.api.event.lifecycle.v1.ServerLifecycleEvents;
import net.fabricmc.fabric.api.networking.v1.ServerPlayConnectionEvents;

import net.minecraft.commands.Commands;
import net.minecraft.network.chat.Component;
import net.minecraft.ChatFormatting;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.level.GameType;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.Items;
import net.minecraft.world.effect.MobEffectInstance;
import net.minecraft.world.effect.MobEffects;

import io.nats.client.Connection;
import io.nats.client.Dispatcher;
import io.nats.client.Nats;
import io.nats.client.Options;

import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentLinkedQueue;

public class RtsEconomyMod implements ModInitializer {
    // AUTHED —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è SimpleAuth –º–æ–¥–æ–º

    // === NATS ===
    private static volatile Connection NATS = null;
    private static volatile boolean NATS_CONNECTED = false;
    private static Dispatcher NATS_DISP;
    private static final ObjectMapper JSON = new ObjectMapper();
    private static final ConcurrentLinkedQueue<Notif> NOTIFS = new ConcurrentLinkedQueue<>();
    // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (—Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ 30 —Å–µ–∫—É–Ω–¥)
    private static final Map<String, Long> MESSAGE_DEDUP = new ConcurrentHashMap<>();

    private static class Notif {
        final UUID owner; final String text;
        Notif(UUID owner, String text) { this.owner = owner; this.text = text; }
    }

    @Override
    public void onInitialize() {
        // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è SimpleAuth –º–æ–¥–æ–º

        // –≤—ã–¥–∞—Ç—å —á–∞—Ç-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–≥–ª–∞–≤–Ω—ã–π —Ç—Ä–µ–¥ —Å–µ—Ä–≤–µ—Ä–∞)
        ServerTickEvents.END_SERVER_TICK.register(server -> {
            Notif nf;
            while ((nf = NOTIFS.poll()) != null) {
                ServerPlayer p = server.getPlayerList().getPlayer(nf.owner);
                if (p != null) { // SimpleAuth –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    p.sendSystemMessage(Component.literal(nf.text).withStyle(ChatFormatting.AQUA));
                }
            }
        });

        // –∑–∞–∫—Ä—ã—Ç–∏–µ NATS –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
        ServerLifecycleEvents.SERVER_STOPPING.register(srv -> {
            try { if (NATS_DISP != null) NATS_DISP.unsubscribe("econ.production.done"); } catch (Exception ignored) {}
            try { if (NATS_DISP != null) NATS_DISP.unsubscribe("econ.production.claimed"); } catch (Exception ignored) {}
            try { if (NATS_DISP != null) NATS_DISP.unsubscribe("econ.skill.done"); } catch (Exception ignored) {}
            try { if (NATS != null) NATS.close(); } catch (Exception ignored) {}
            NATS = null;
            NATS_CONNECTED = false;
        });

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ NATS –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
        connectNatsOnce();

        // –∫–æ–º–∞–Ω–¥—ã
        CommandRegistrationCallback.EVENT.register((dispatcher, registryAccess, env) -> {

            // –ö–æ–º–∞–Ω–¥—ã /register –∏ /login —Ç–µ–ø–µ—Ä—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è SimpleAuth –º–æ–¥–æ–º

            // ===== SKILL =====
            dispatcher.register(Commands.literal("skill")
                    .then(Commands.literal("train")
                            .then(Commands.argument("id", StringArgumentType.string())
                                    .executes(ctx -> {
                                        ServerPlayer p = ctx.getSource().getPlayerOrException();
                                        if (!requireAuth(p)) return 0;
                                        String skillId = StringArgumentType.getString(ctx, "id");
                                        try {
                                            System.out.println("[EconMod] Starting skill training: " + skillId + " for " + p.getUUID());
                                            JsonNode res = EconHttp.trainSkill(p.getUUID(), skillId);
                                            System.out.println("[EconMod] Skill training response: " + res);
                                            long left = res.get("endMs").asLong() - System.currentTimeMillis();
                                            p.sendSystemMessage(Component.literal(
                                                            "‚è≥ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ '" + skillId + "' ‚Üí L" + res.get("targetLevel").asInt()
                                                                    + " (~" + Math.max(0, left/1000) + "—Å)")
                                                    .withStyle(ChatFormatting.AQUA));
                                        } catch (Exception e) {
                                            System.out.println("[EconMod] Skill training error: " + e.getMessage());
                                            e.printStackTrace();
                                            p.sendSystemMessage(Component.literal("–û—à–∏–±–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: " + e.getMessage())
                                                    .withStyle(ChatFormatting.RED));
                                        }
                                        return 1;
                                    })))
                    .then(Commands.literal("status")
                            .executes(ctx -> {
                                ServerPlayer p = ctx.getSource().getPlayerOrException();
                                if (!requireAuth(p)) return 0;
                                try {
                                    JsonNode st = EconHttp.skillStatus(p.getUUID()).path("current");
                                    if (st.isMissingNode() || st.isNull()) {
                                        p.sendSystemMessage(Component.literal("–ù–∞–≤—ã–∫–∏: —Å–µ–π—á–∞—Å –Ω–µ —Ç—Ä–µ–Ω–∏—Ä—É—é—Ç—Å—è.")
                                                .withStyle(ChatFormatting.GRAY));
                                    } else {
                                        long left = st.get("endMs").asLong() - System.currentTimeMillis();
                                        p.sendSystemMessage(Component.literal(
                                                        "üß† " + st.get("skillId").asText()
                                                                + " ‚Üí L" + st.get("targetLevel").asInt()
                                                                + " –æ—Å—Ç–∞–ª–æ—Å—å ~" + Math.max(0, left/1000) + "—Å")
                                                .withStyle(ChatFormatting.YELLOW));
                                    }
                                } catch (Exception e) {
                                    p.sendSystemMessage(Component.literal("–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: " + e.getMessage())
                                            .withStyle(ChatFormatting.RED));
                                }
                                return 1;
                            }))
                    .then(Commands.literal("list")
                            .executes(ctx -> {
                                ServerPlayer p = ctx.getSource().getPlayerOrException();
                                if (!requireAuth(p)) return 0;
                                try {
                                    var skills = EconHttp.fetchSkills();
                                    if (skills.isEmpty()) {
                                        p.sendSystemMessage(Component.literal("–°–∫–∏–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
                                                .withStyle(ChatFormatting.GRAY));
                                    } else {
                                        p.sendSystemMessage(Component.literal("–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:")
                                                .withStyle(ChatFormatting.GOLD));
                                        for (var s : skills) {
                                            p.sendSystemMessage(Component.literal(
                                                    "‚Ä¢ " + s.id + " ‚Äî " + s.title + " (–º–∞–∫—Å L" + s.maxLevel + ")"
                                            ).withStyle(ChatFormatting.YELLOW));
                                        }
                                        p.sendSystemMessage(Component.literal(
                                                "–ü–æ–¥—Ä–æ–±–Ω–æ: /skill train <id>  |  /skill status"
                                        ).withStyle(ChatFormatting.DARK_GRAY));
                                    }
                                } catch (Exception e) {
                                    p.sendSystemMessage(Component.literal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞: " + e.getMessage())
                                            .withStyle(ChatFormatting.RED));
                                }
                                return 1;
                            }))
                    .then(Commands.literal("refresh")
                            .executes(ctx -> {
                                ServerPlayer p = ctx.getSource().getPlayerOrException();
                                if (!requireAuth(p)) return 0;
                                try {
                                    EconHttp.invalidateSkillsCache();
                                    EconHttp.fetchSkills();
                                    p.sendSystemMessage(Component.literal("–ö—ç—à —Å–ø–∏—Å–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω.")
                                            .withStyle(ChatFormatting.GREEN));
                                } catch (Exception e) {
                                    p.sendSystemMessage(Component.literal("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: " + e.getMessage())
                                            .withStyle(ChatFormatting.RED));
                                }
                                return 1;
                            }))
                    .then(Commands.literal("clear-cache")
                            .executes(ctx -> {
                                ServerPlayer p = ctx.getSource().getPlayerOrException();
                                if (!requireAuth(p)) return 0;
                                try {
                                    // –û—á–∏—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫—ç—à —É—Ä–æ–≤–Ω–µ–π –Ω–∞–≤—ã–∫–æ–≤
                                    EconHttp.clearAllSkillLevelCache();
                                    p.sendSystemMessage(Component.literal("–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫—ç—à –Ω–∞–≤—ã–∫–æ–≤ –æ—á–∏—â–µ–Ω.")
                                            .withStyle(ChatFormatting.GREEN));
                                } catch (Exception e) {
                                    p.sendSystemMessage(Component.literal("–û—à–∏–±–∫–∞: " + e.getMessage())
                                            .withStyle(ChatFormatting.RED));
                                }
                                return 1;
                            }))
                    .then(Commands.literal("level")
                            .then(Commands.argument("skillId", StringArgumentType.string())
                                    .executes(ctx -> {
                                        ServerPlayer p = ctx.getSource().getPlayerOrException();
                                        if (!requireAuth(p)) return 0;
                                        String skillId = StringArgumentType.getString(ctx, "skillId");
                                        try {
                                            JsonNode res = EconHttp.skillLevel(p.getUUID(), skillId);
                                            int level = res.get("level").asInt();
                                            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
                                            int discount = Math.min(25, level * 5); // 5% –∑–∞ —É—Ä–æ–≤–µ–Ω—å, –º–∞–∫—Å 25%
                                            p.sendSystemMessage(Component.literal(
                                                    "üéØ " + skillId + ": —É—Ä–æ–≤–µ–Ω—å " + level + " (—Å–∫–∏–¥–∫–∞ -" + discount + "%)")
                                                    .withStyle(ChatFormatting.AQUA));
                                        } catch (Exception e) {
                                            p.sendSystemMessage(Component.literal("–û—à–∏–±–∫–∞: " + e.getMessage())
                                                    .withStyle(ChatFormatting.RED));
                                        }
                                        return 1;
                                    })))
            );

            // ===== ECO =====
            dispatcher.register(Commands.literal("eco")
                    .then(Commands.literal("debug")
                            .then(Commands.literal("add-iron")
                                    .then(Commands.argument("qty", IntegerArgumentType.integer(1, 1000))
                                            .executes(ctx -> {
                                                ServerPlayer p = ctx.getSource().getPlayerOrException();
                                                if (!requireAuth(p)) return 0;
                                                int qty = IntegerArgumentType.getInteger(ctx, "qty");
                                                try {
                                                    // –í—ã–∑—ã–≤–∞–µ–º debug API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                                                    String url = System.getProperty("econ.base", "http://localhost:8081") 
                                                            + "/api/v1/debug/add-material?ownerUuid=" + p.getUUID() 
                                                            + "&itemId=ore.iron&qty=" + qty;
                                                    var client = java.net.http.HttpClient.newHttpClient();
                                                    var request = java.net.http.HttpRequest.newBuilder()
                                                            .uri(java.net.URI.create(url))
                                                            .timeout(java.time.Duration.ofSeconds(5))
                                                            .POST(java.net.http.HttpRequest.BodyPublishers.noBody())
                                                            .build();
                                                    var response = client.send(request, java.net.http.HttpResponse.BodyHandlers.ofString());
                                                    
                                                    if (response.statusCode() == 200) {
                                                        p.sendSystemMessage(Component.literal("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ " + qty + " –∂–µ–ª–µ–∑–Ω–æ–π —Ä—É–¥—ã")
                                                                .withStyle(ChatFormatting.GREEN));
                                                    } else {
                                                        p.sendSystemMessage(Component.literal("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: " + response.body())
                                                                .withStyle(ChatFormatting.RED));
                                                    }
                                                } catch (Exception ex) {
                                                    p.sendSystemMessage(Component.literal("‚ùå –û—à–∏–±–∫–∞: " + ex.getMessage())
                                                            .withStyle(ChatFormatting.RED));
                                                }
                                                return 1;
                                            }))))
                    .then(Commands.literal("start")
                            .then(Commands.argument("seconds", IntegerArgumentType.integer(1, 3600))
                                    .executes(ctx -> {
                                        ServerPlayer p = ctx.getSource().getPlayerOrException();
                                        if (!requireAuth(p)) return 0;
                                        int seconds = IntegerArgumentType.getInteger(ctx, "seconds");
                                        try {
                                            JsonNode res = EconHttp.startProduction(p.getUUID(), "demo:diamond", seconds);
                                            String jobId = res.get("jobId").asText();
                                            p.sendSystemMessage(Component.literal(
                                                            "–ó–∞–ø—É—â–µ–Ω–æ: " + jobId + " (–≥–æ—Ç–æ–≤–æ —á–µ—Ä–µ–∑ " + seconds + "—Å)")
                                                    .withStyle(ChatFormatting.GREEN));
                                        } catch (Exception ex) {
                                            p.sendSystemMessage(Component.literal("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: " + ex.getMessage())
                                                    .withStyle(ChatFormatting.RED));
                                        }
                                        return 1;
                                    })))
                    .then(Commands.literal("list")
                            .executes(ctx -> {
                                ServerPlayer p = ctx.getSource().getPlayerOrException();
                                if (!requireAuth(p)) return 0;
                                try {
                                    var list = EconHttp.listJobs(p.getUUID());
                                    if (list.isEmpty()) {
                                        p.sendSystemMessage(Component.literal("–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π.")
                                                .withStyle(ChatFormatting.GRAY));
                                    } else {
                                        long now = System.currentTimeMillis();
                                        for (var j : list) {
                                            long left = Math.max(0, j.endMs - now);
                                            p.sendSystemMessage(Component.literal(
                                                            "‚Ä¢ " + j.jobId + " [" + j.status + "] ETA " + (left / 1000) + "—Å")
                                                    .withStyle(ChatFormatting.YELLOW));
                                        }
                                    }
                                } catch (Exception ex) {
                                    p.sendSystemMessage(Component.literal("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: " + ex.getMessage())
                                            .withStyle(ChatFormatting.RED));
                                }
                                return 1;
                            }))
                    .then(Commands.literal("claim")
                            .executes(ctx -> {
                                ServerPlayer p = ctx.getSource().getPlayerOrException();
                                if (!requireAuth(p)) return 0;
                                try {
                                    int n = EconHttp.claim(p.getUUID());
                                    if (n > 0) {
                                        p.addItem(new ItemStack(Items.DIAMOND, n));
                                        p.sendSystemMessage(Component.literal("–í—ã–¥–∞–Ω–æ –∞–ª–º–∞–∑–æ–≤: " + n)
                                                .withStyle(ChatFormatting.GREEN));
                                    } else {
                                        p.sendSystemMessage(Component.literal("–ù–∞–≥—Ä–∞–¥ –Ω–µ—Ç.")
                                                .withStyle(ChatFormatting.GRAY));
                                    }
                                } catch (Exception ex) {
                                    p.sendSystemMessage(Component.literal("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: " + ex.getMessage())
                                            .withStyle(ChatFormatting.RED));
                                }
                                return 1;
                            }))
            );
        });
    }

    private static boolean requireAuth(ServerPlayer p) {
        // SimpleAuth –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        // –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –Ω–µ –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã
        return true;
    }

    private static void freeze(ServerPlayer p, boolean freeze) {
        if (freeze) {
            p.setGameMode(GameType.ADVENTURE);
            p.setDeltaMovement(0, 0, 0);
            p.addEffect(new MobEffectInstance(MobEffects.MOVEMENT_SLOWDOWN, 40, 255, false, false, false));
            p.addEffect(new MobEffectInstance(MobEffects.DIG_SLOWDOWN, 40, 255, false, false, false));
            p.addEffect(new MobEffectInstance(MobEffects.BLINDNESS, 40, 0, false, false, false));
        } else {
            p.removeEffect(MobEffects.MOVEMENT_SLOWDOWN);
            p.removeEffect(MobEffects.DIG_SLOWDOWN);
            p.removeEffect(MobEffects.BLINDNESS);
            p.setGameMode(GameType.SURVIVAL);
        }
    }

    // ‚Äî‚Äî‚Äî NATS ‚Äî‚Äî‚Äî

    private static synchronized void connectNatsOnce() {
        if (NATS_CONNECTED) return;
        try {
            String url = System.getProperty("nats.url", "nats://localhost:4222");
            Options opts = new Options.Builder()
                    .server(url)
                    .connectionName("mc-server")
                    .maxReconnects(-1)
                    .reconnectWait(Duration.ofSeconds(2))
                    .pingInterval(Duration.ofSeconds(10))
                    .build();
            NATS = Nats.connect(opts);

            NATS_DISP = NATS.createDispatcher(msg -> {
                try {
                    String subj = msg.getSubject();
                    JsonNode node = JSON.readTree(new String(msg.getData(), StandardCharsets.UTF_8));

                    // owner –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å ‚Äî –Ω–µ –ø–∞–¥–∞–µ–º
                    UUID owner = null;
                    if (node.hasNonNull("owner")) {
                        String os = node.get("owner").asText("");
                        if (!os.isEmpty()) {
                            try { owner = UUID.fromString(os); } catch (Exception ignored) {}
                        }
                    }
                    if (owner == null) return;

                    if ("econ.production.done".equals(subj)) {
                        String jobId = node.path("jobId").asText("");
                        NOTIFS.add(new Notif(owner, "‚õè –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! /eco claim (job " + shortId(jobId) + ")"));
                    } else if ("econ.production.claimed".equals(subj)) {
                        int cnt = node.path("claimed").asInt(0); // —Å–µ—Ä–≤–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ "claimed"
                        if (cnt > 0) {
                            NOTIFS.add(new Notif(owner, "‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–≥—Ä–∞–¥: " + cnt));
                        }
                    } else if ("econ.skill.done".equals(subj)) {
                        String skill = node.path("skill").asText("");
                        int lvl = node.path("level").asInt(0);
                        
                        // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è: —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
                        String dedupKey = owner + "|skill|" + skill + "|" + lvl;
                        long now = System.currentTimeMillis();
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —Ç–∞–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
                        Long lastTime = MESSAGE_DEDUP.get(dedupKey);
                        if (lastTime != null && (now - lastTime) < 30_000) {
                            // –î—É–±–ª–∏–∫–∞—Ç - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                            return;
                        }
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                        MESSAGE_DEDUP.put(dedupKey, now);
                        
                        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 30 —Å–µ–∫—É–Ω–¥)
                        MESSAGE_DEDUP.entrySet().removeIf(entry -> (now - entry.getValue()) > 30_000);
                        
                        // –û—á–∏—â–∞–µ–º –∫—ç—à —É—Ä–æ–≤–Ω—è –Ω–∞–≤—ã–∫–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        EconHttp.invalidateSkillLevelCache(owner, skill);
                        NOTIFS.add(new Notif(owner, "üß† –ù–∞–≤—ã–∫ " + skill + " –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è " + lvl));
                    }
                } catch (Exception ignored) {}
            });

            // –æ–¥–Ω–∞ —Ç–æ—á–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ —Ç–µ–º—ã
            NATS_DISP.subscribe("econ.production.done");
            NATS_DISP.subscribe("econ.production.claimed");
            NATS_DISP.subscribe("econ.skill.done");

            NATS_CONNECTED = true;
            System.out.println("[EconMod] NATS connected: " + url + " (econ.production.*, econ.skill.done)");
        } catch (Exception e) {
            System.out.println("[EconMod] NATS connect failed: " + e.getMessage());
        }
    }

    private static String shortId(String s) {
        return (s == null || s.length() < 8) ? s : s.substring(0, 8) + "‚Ä¶";
    }
}
