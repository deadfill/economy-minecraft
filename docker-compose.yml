services:
  # PostgreSQL Primary (Master) - для записи
  postgres-primary:
    image: postgres:16
    restart: unless-stopped
    environment:
      - POSTGRES_USER=game
      - POSTGRES_PASSWORD=gamepass
      - POSTGRES_DB=econ
      - POSTGRES_REPLICATION_USER=game
      - POSTGRES_REPLICATION_PASSWORD=gamepass
    ports:
      - "5432:5432"
    volumes:
      - pgdata_primary:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/10-init.sql:ro
      - ./sql/primary-setup.sql:/docker-entrypoint-initdb.d/20-primary-setup.sql:ro
      - ./sql/setup-pg-hba.sh:/docker-entrypoint-initdb.d/30-setup-pg-hba.sh:ro
    command: >
      postgres 
      -c wal_level=replica 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c synchronous_commit=off
      -c listen_addresses='*'
      -c hot_standby=on
    networks:
      - postgres-cluster

  # PostgreSQL Replica 1 - для чтения
  postgres-replica1:
    image: postgres:16
    restart: unless-stopped
    environment:
      - POSTGRES_USER=game
      - POSTGRES_PASSWORD=gamepass
      - POSTGRES_DB=econ
      - PGUSER=postgres
      - POSTGRES_PRIMARY_HOST=postgres-primary
      - POSTGRES_REPLICATION_USER=game
      - POSTGRES_REPLICATION_PASSWORD=gamepass
      - POSTGRES_SERVICE_NAME=postgres-replica1
    ports:
      - "5433:5432"
    volumes:
      - pgdata_replica1:/var/lib/postgresql/data
      - ./sql/replica-setup.sh:/docker-entrypoint-initdb.d/setup-replica.sh:ro
    depends_on:
      - postgres-primary
    networks:
      - postgres-cluster

  # PostgreSQL Replica 2 - для чтения
  postgres-replica2:
    image: postgres:16
    restart: unless-stopped
    environment:
      - POSTGRES_USER=game
      - POSTGRES_PASSWORD=gamepass
      - POSTGRES_DB=econ
      - PGUSER=postgres
      - POSTGRES_PRIMARY_HOST=postgres-primary
      - POSTGRES_REPLICATION_USER=game
      - POSTGRES_REPLICATION_PASSWORD=gamepass
      - POSTGRES_SERVICE_NAME=postgres-replica2
    ports:
      - "5434:5432"
    volumes:
      - pgdata_replica2:/var/lib/postgresql/data
      - ./sql/replica-setup.sh:/docker-entrypoint-initdb.d/setup-replica.sh:ro
    depends_on:
      - postgres-primary
    networks:
      - postgres-cluster

  redis:
    image: redis:7
    restart: unless-stopped
    command: ["redis-server","--appendonly","yes","--save","900","1","300","10","60","10000"]
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redisdata:/data

  economy-quarkus:
    build:
      context: ./economy-quarkus
    ports:
      - "8081:8081"
    environment:
      - PGBOUNCER_WRITE_HOST=pgbouncer-master
      - PGBOUNCER_WRITE_PORT=5432
      - PGBOUNCER_READ_HOST=pgbouncer-replica1
      - PGBOUNCER_READ_PORT=5432
      - POSTGRES_DB=econ
      - POSTGRES_USER=game
      - POSTGRES_PASSWORD=gamepass
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NATS_SERVERS=nats://nats:4222
    depends_on:
      - pgbouncer-master
      - pgbouncer-replica1
      - pgbouncer-replica2
      - redis
      - nats
    networks:
      - postgres-cluster
      - default

  nats:
    image: nats:2
    restart: unless-stopped
    command: ["-js","-m","${NATS_MONITOR_PORT:-8222}","-DV"]
    ports:
      - "${NATS_PORT:-4222}:4222"
      - "${NATS_MONITOR_PORT:-8222}:8222"

  # PgBouncer for PostgreSQL Master - для записи
  pgbouncer-master:
    image: edoburu/pgbouncer:latest
    restart: unless-stopped
    environment:
      - DB_USER=game
      - DB_PASSWORD=gamepass
      - DB_HOST=postgres-primary
      - DB_PORT=5432
      - DB_NAME=econ
    ports:
      - "6432:5432"
    volumes:
      - ./pgbouncer/pgbouncer-master.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt:ro
    depends_on:
      - postgres-primary
    networks:
      - postgres-cluster

  # PgBouncer for PostgreSQL Replica 1 - для чтения
  pgbouncer-replica1:
    image: edoburu/pgbouncer:latest
    restart: unless-stopped
    environment:
      - DB_USER=game
      - DB_PASSWORD=gamepass
      - DB_HOST=postgres-replica1
      - DB_PORT=5432
      - DB_NAME=econ
    ports:
      - "7432:5432"
    volumes:
      - ./pgbouncer/pgbouncer-replica1.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt:ro
    depends_on:
      - postgres-replica1
    networks:
      - postgres-cluster

  # PgBouncer for PostgreSQL Replica 2 - для чтения
  pgbouncer-replica2:
    image: edoburu/pgbouncer:latest
    restart: unless-stopped
    environment:
      - DB_USER=game
      - DB_PASSWORD=gamepass
      - DB_HOST=postgres-replica2
      - DB_PORT=5432
      - DB_NAME=econ
    ports:
      - "7433:5432"
    volumes:
      - ./pgbouncer/pgbouncer-replica2.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt:ro
    depends_on:
      - postgres-replica2
    networks:
      - postgres-cluster

  # GravitLauncher LaunchServer (Simplified)
  gravitlauncher:
    build:
      context: ./gravitlauncher-official
      dockerfile: Dockerfile.simple
    restart: unless-stopped
    stdin_open: true
    tty: true
    ports:
      - "9274:9274"  # LaunchServer API
    environment:
      - ADDRESS=localhost
      - PROJECTNAME=Minecraft Economy
      - POSTGRES_HOST=pgbouncer-master
      - POSTGRES_PORT=5432
      - POSTGRES_USER=game
      - POSTGRES_PASSWORD=gamepass
      - POSTGRES_DB=econ
    volumes:
      - gravitlauncher_data:/app/data
    depends_on:
      - pgbouncer-master
      - pgbouncer-replica1
      - pgbouncer-replica2
      - redis
      - nats
    networks:
      - postgres-cluster
      - default

  # Nginx для GravitLauncher
  gravitlauncher-nginx:
    build:
      context: ./gravitlauncher-official
      dockerfile: Dockerfile.nginx
    restart: unless-stopped
    ports:
      - "17550:80"  # Nginx proxy для GravitLauncher
    volumes:
      - gravitlauncher_data:/volume
    depends_on:
      - gravitlauncher
    networks:
      - default

volumes:
  pgdata_primary:
  pgdata_replica1:
  pgdata_replica2:
  redisdata:
  gravitlauncher_data:
  gravitlauncher_profiles:

networks:
  postgres-cluster:
    driver: bridge
